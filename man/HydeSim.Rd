% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Hydenet_HydePosterior.R
\name{HydeSim}
\alias{HydeSim}
\alias{HydePosterior}
\title{Simulated Distributions of a Decision Network}
\usage{
HydeSim(
  cHN,
  variable.names,
  n.iter,
  thin = 1,
  ...,
  monitor_observed = TRUE,
  bind = TRUE
)

HydePosterior(...)
}
\arguments{
\item{cHN}{A \code{compiledHydeNetwork} object as returned by
\code{compileJagsNetwork}.}

\item{variable.names}{a character vector giving the names of variables to be monitored.}

\item{n.iter}{number of iterations to monitor.}

\item{thin}{thinning interval for monitors.}

\item{...}{options arguments that are passed to the update method for
jags model objects.}

\item{monitor_observed}{If TRUE, the observed or fixed variables (those
passed to the \code{data} argument in \code{compileJagsNetwork}) are
forced into \code{variable.names} if not already provided.  This is
recommended, especially if you will be binding multiple JAGS runs
together.}

\item{bind}{Logical. If \code{TRUE}, simulated distributions will be bound into
a single data frame.  If \code{FALSE}, the standard output from \code{rjags}
is returned.}
}
\value{
A list of class \code{HydeSim} with elements \code{codas}
(the MCMC matrices from \code{coda.samples}), \code{observed} (the values
of the variables that were observed), \code{dag} (the dag object for
convenience in displaying the network), and \code{factorRef} (giving the
mappings of factor levels to factor variables).
}
\description{
The simulated distributions of the decision network can be
evaluated to determine the probabilistic outcomes based on the decision
inputs in the model as well as subject specific factors.
}
\details{
This is essentially a wrapper around \code{coda.samples} that
returns in a list the output for each run of \code{coda.samples} over
the rows of the policy/decision matrix given in the \code{data} argument
of \code{compileJagsNetwork}.
}
\examples{
#creates the causal diagram
my_dag = HydeNetwork(~B|A + C|A + D|B*C)

#adds set effect sizes and distributions to the causal diagram
my_dag = setNode(my_dag, A, nodeType = "dbern", prob = 0.5)
my_dag = setNode(my_dag, B, nodeType = "dnorm", mu = paste0(0.2," * A + ",0 - 0.2*0.5), tau = 1)
my_dag = setNode(my_dag, C, nodeType = "dbern", prob = paste0("ilogit(",0.8," * A + ",set_p(0.9, 0.8*0.5),")"))
my_dag = setNode(my_dag, D, nodeType = "dbern", prob = paste0("ilogit(",0.05," * B + ", 1.2," * C + ",set_p(0.25, 1.2 * 0.9 + 0.05 * 0 ),")"))

#create data creates a single dataset.
#This lets users see if the simulated datasets behave as expected before committing to a large simulation with many iterations

sim_data = create_data(my_dag, 10000)
head(sim_data)

#below we set up the DAG so we can quickly change the set prevalence of node A (arg x), and the effect size between A and B (arg y)
flex_dag = function(x,y){
  my_dag = setNode(my_dag, A, nodeType = "dbern", prob = x)
  my_dag = setNode(my_dag, B, nodeType = "dnorm", mu = paste0(y," * A + ",0 - y*x), tau = 1)
  my_dag = setNode(my_dag, C, nodeType = "dbern", prob = paste0("ilogit(",0.8," * A + ",set_p(0.9, 0.8*x),")"))
  my_dag = setNode(my_dag, D, nodeType = "dbern", prob = paste0("ilogit(",0.05," * B + ", 1.2," * C + ",set_p(0.25, 1.2 * 0.9 + 0.05 * 0 ),")"))
}


sim_data_1 = create_data(flex_dag, 10000, x = .2, y = 1)
x_prev_1 = sum(sim_data_1$A)/10000
y_effect_estimate_1 =lm(B~A, sim_data_1)$coefficients[2]
x_prev_1
y_effect_estimate_1

sim_data_2 = create_data(flex_dag, 10000, x = .7, y = .5)
x_prev_2 = sum(sim_data_2$A)/10000
y_effect_estimate_2 =lm(B~A, sim_data_2)$coefficients[2]
x_prev_2
y_effect_estimate_2

#If positivity = TRUE the program will make sure each binary column has both 0s and 1s
#positivity_violation_1 = create_data(flex_dag, 10, x = .000001, y = 1)
#positivity_restored_1 = create_data(flex_dag, 10, positivity = TRUE, x = .00001, y = 1)
#positivity_violation_1
#positivity_restored_1

#positivity_violation_2 = create_data(flex_dag, 10, x = .999999, y = 1)
#positivity_restored_2 = create_data(flex_dag, 10, positivity = TRUE, x = .99999, y = 1)
#positivity_violation_2
#positivity_restored_2

}
\author{
Jarrod Dalton and Benjamin Nutter
}
