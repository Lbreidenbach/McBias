% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Hydenet_expectedVariables.R
\name{expectedVariables}
\alias{expectedVariables}
\alias{expectedParameters}
\title{List Expected Parameter Names and Expected Variables Names}
\usage{
expectedVariables(network, node, returnVector = FALSE)

expectedParameters(network, node, returnVector = FALSE)
}
\arguments{
\item{network}{A \code{HydeNetwork} object.}

\item{node}{A node name within \code{network}}

\item{returnVector}{Logical.  If FALSE, the sample string for use in
\code{setNode} is returned.  Otherwise, the vector of parent names
is returned.}
}
\description{
To assist in formula that defines the relationship to a node,
\code{expectedVariables} returns to the console
a sample string that can be pasted into \code{setNode}
and populated with the desired coefficients.
}
\details{
Each node is calculated as a model of its parents.  If no
training data are provided to the network, the user is expected to provide
appropriate estimates of the regression coefficients for the model.

\code{returnVector} will generally be set to \code{FALSE} for most uses,
but can be set to \code{TRUE} for use in error checking.  For example,
in \code{setNode}, if not all of the parents have been given a coefficient
(or if too few coefficients have been given), the vector of names is supplied.
}
\examples{
#creates the causal diagram
my_dag = HydeNetwork(~B|A + C|A + D|B*C)

#adds set effect sizes and distributions to the causal diagram
my_dag = setNode(my_dag, A, nodeType = "dbern", prob = 0.5)
my_dag = setNode(my_dag, B, nodeType = "dnorm", mu = paste0(0.2," * A + ",0 - 0.2*0.5), tau = 1)
my_dag = setNode(my_dag, C, nodeType = "dbern", prob = paste0("ilogit(",0.8," * A + ",set_p(0.9, 0.8*0.5),")"))
my_dag = setNode(my_dag, D, nodeType = "dbern", prob = paste0("ilogit(",0.05," * B + ", 1.2," * C + ",set_p(0.25, 1.2 * 0.9 + 0.05 * 0 ),")"))

#ScenarioMatrix object
ideal_run = varied_runs(runs = 100, dag = my_dag, exposure = "B", outcome = "C", covariates = "A", n = 1000)

#Gives a dataframe of values for quantifying the bias and its effects on the reject null rate
beta_summary(ideal_run)

#Creates a ridgeline plot to help with bias and coverage visualization
ci_ridges(ideal_run)
}
\author{
Jarrod Dalton and Benjamin Nutter
}
